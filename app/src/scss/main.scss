// This is the default scss file, more specific styling is defined directly into components.
// It it imported in `scr/App.vue` style tag.

// Dependencies variables overrides and custom variables
// Variables overrides are defined before actual SCSS imports
@import 'variables';


// Dependencies SCSS imports
// `~` allow to import a node_modules folder (resolved by Webpack)
// @import "~bootstrap/scss/root";
@import "~bootstrap/scss/reboot";
@import "~bootstrap/scss/type";
@import "~bootstrap/scss/images";
@import "~bootstrap/scss/code";
@import "~bootstrap/scss/grid";
@import "~bootstrap/scss/tables";
@import "~bootstrap/scss/forms";
@import "~bootstrap/scss/buttons";
@import "~bootstrap/scss/transitions";
@import "~bootstrap/scss/dropdown";
@import "~bootstrap/scss/button-group";
@import "~bootstrap/scss/input-group";
@import "~bootstrap/scss/custom-forms";
@import "~bootstrap/scss/nav";
@import "~bootstrap/scss/navbar";
@import "~bootstrap/scss/card";
@import "~bootstrap/scss/breadcrumb";
// @import "~bootstrap/scss/pagination";
@import "~bootstrap/scss/badge";
// @import "~bootstrap/scss/jumbotron";
@import "~bootstrap/scss/alert";
@import "~bootstrap/scss/progress";
// @import "~bootstrap/scss/media";
@import "~bootstrap/scss/list-group";
@import "~bootstrap/scss/close";
// @import "~bootstrap/scss/toasts";
@import "~bootstrap/scss/modal";
@import "~bootstrap/scss/tooltip";
@import "~bootstrap/scss/popover";
// @import "~bootstrap/scss/carousel";
@import "~bootstrap/scss/spinners";
@import "~bootstrap/scss/utilities";
// @import "~bootstrap/scss/print";

@import '~bootstrap-vue/src/index.scss';

// Import fonts
@import 'font';
@import '~fork-awesome/scss/fork-awesome.scss';

// helper to set the required 4 CSS variables per color to allow `calc` computation of variants and states
@mixin hsl-color($name, $h, $s, $l) {
  --#{$name}: hsl(#{$h}, #{$s}, #{$l});
  --#{$name}-h: #{$h};
  --#{$name}-s: #{$s};
  --#{$name}-l: #{$l};
}

:root {
  color-scheme: light;

  --yiq-contrasted-threshold: 150;

  @include hsl-color('white', 0, 0%, 100%);
  @include hsl-color('black', 0, 0%, 0%);
  @include hsl-color('blue', 211, 64%, 50%);
  @include hsl-color('indigo', 263, 90%, 51%);
  @include hsl-color('purple', 280, 61%, 50%);
  @include hsl-color('pink', 332, 79%, 58%);
  @include hsl-color('red', 354, 70%, 54%);
  @include hsl-color('orange', 27, 98%, 54%);
  @include hsl-color('yellow', 45, 100%, 66%);
  @include hsl-color('green', 134, 61%, 41%);
  @include hsl-color('teal', 162, 73%, 46%);
  @include hsl-color('cyan', 188, 78%, 41%);

  @include hsl-color('gray-100', 210, 17%, 98%);
  @include hsl-color('gray-200', 210, 16%, 93%);
  @include hsl-color('gray-300', 210, 14%, 89%);
  @include hsl-color('gray-400', 210, 14%, 83%);
  @include hsl-color('gray-500', 210, 11%, 71%);
  @include hsl-color('gray-600', 208, 7%, 46%);
  @include hsl-color('gray-700', 210, 9%, 31%);
  @include hsl-color('gray-800', 210, 10%, 23%);
  @include hsl-color('gray-900', 210, 11%, 15%);

  // Overwrite list-group-item variants to lighter ones (used in diagnosis for example)
  @each $color, $value in $theme-colors {
    @include list-group-item-variant($color, theme-color-level($color, $list-group-item-bg-level), theme-color-level($color, $list-group-item-color-level));

    .btn-#{$color} {
      &:focus,
      &.focus {
        box-shadow: 0 0 0 $btn-focus-width rgba($value, .3);
      }
    }
  }
}

[dark-theme="true"] {
  color-scheme: dark; // Ask browser to use dark mode native styling

  --yiq-contrasted-threshold: 120;

  @include hsl-color('white', 256, 0%, 12.5%);
  @include hsl-color('black', 256, 0%, 100%);
  @include hsl-color('blue', 210.7, 95.5%, 65.5%);
  @include hsl-color('purple', 280, 77.8%, 62.9%);
  @include hsl-color('red', 0, 100%, 67.6%);
  @include hsl-color('green', 134.3, 74.4%, 67.8%);
  @include hsl-color('cyan', 188.4, 91.4%, 72.5%);

  @include hsl-color('gray-900', 256, 0%, 98%);
  @include hsl-color('gray-800', 256, 0%, 93%);
  @include hsl-color('gray-700', 256, 0%, 89%);
  @include hsl-color('gray-600', 256, 0%, 83%);
  @include hsl-color('gray-500', 256, 0%, 71%);
  @include hsl-color('gray-400', 256, 0%, 46%);
  @include hsl-color('gray-300', 256, 0%, 31%);
  @include hsl-color('gray-200', 256, 0%, 23%);
  @include hsl-color('gray-100', 256, 0%, 15%);

  @each $color, $value in $theme-colors {
    @include list-group-item-variant($color, theme-color-level($color, -6), theme-color-level($color, 2));

    .alert-#{$color} {
      @include alert-variant(theme-color-level($color, -6), theme-color-level($color, -5), theme-color-level($color, 2));
    }
  }

  // FIX svg fill not working with CSS variables
  .custom-checkbox .custom-control-input {
    &:checked ~ .custom-control-label::after {
      background-image: escape-svg(get-checkbox-icon-checked('#202020'));
    }

    &:indeterminate ~ .custom-control-label::after {
      background-image: escape-svg(get-checkbox-icon-indeterminate('#202020'));
    }
  }
}

// Style overrides happens after dependencies imports

html {
  min-height: 100vh;
}
body {
  overflow-x: hidden;
  min-height: 100vh;
  margin: 0;
}

#app {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.menu-list .list-group-item {
  padding: $list-group-item-padding-y 0;
  display: flex;
  align-items: center;
}


// Add breakpoints for w-*
@each $breakpoint in map-keys($grid-breakpoints) {
  @each $size, $length in $sizes {
    @include media-breakpoint-up($breakpoint) {
      .w-#{$breakpoint}-#{$size} {
        width: $length !important;
      }
    }
  }
}

// Add xs sized btn
.btn-xs {
  @include button-size($btn-padding-y-xs, $btn-padding-x-xs, $btn-font-size-sm, $btn-line-height-xs, $btn-border-radius-sm);
}

// Allow state of input group to be displayed under the group
.input-group .is-invalid ~ .invalid-feedback {
  display: block;
}


.tooltip { top: 0; }
// Descriptive list (<b-row /> elems with <b-col> inside)
// FIXME REMOVE when every infos switch to `DescriptionRow`
.row-line {
  @include media-breakpoint-up(md) {
    &:hover {
      background-color: rgba($black, 0.05);
      border-radius: 0.2rem;
    }
  }

  @include media-breakpoint-down(sm) {
      flex-direction: column;

      &:not(:last-of-type) {
        margin-bottom: 0.5rem;
        padding-bottom: 0.5rem;
        border-bottom: $border-width solid $card-border-color;
      }
  }
}

.card + .card, .card + .config-panel, .config-panel + .card {
  margin-top: 2rem;
}
.card-deck .card + .card {
  margin-top: 0;
}

.card-header, .list-group-item {
  h1, h2, h3, h4, h5, h6 {
    margin: 0;
  }
}

.card-header, .list-group-item {
  h1, h2, h3, h4, h5, h6 {
    font-weight: $font-weight-normal;
  }
}

h3.card-title {
  margin-bottom: 1em;
  border-bottom: solid 1px $hr-border-color;
}

// collapse icon
.not-collapsed > .icon {
  transform: rotate(-90deg);
}
.collapsed > .icon {
  transform: rotate(90deg);
  position: relative;
  top: 2px;
}

// limit the size of toggle dropdown buttons to a square
.dropdown-toggle-split {
  max-width: 2.5rem;
}

// Fork-awesome overrides
.fa-fw {
  width: 1.25em !important;
}

// custom css
.actions {
  margin-bottom: 2rem;
  display: flex;
  justify-content: space-between;

  @include media-breakpoint-down(xs) {
    .buttons {
      flex-direction: column;
      justify-content: space-between;
    }
  }

  @include media-breakpoint-down(sm) {
    flex-direction: column-reverse;
    margin-bottom: 2rem;

    .buttons {
      display: flex;
      justify-content: space-between;

      .btn {
        margin-bottom: .5rem;
      }
    }
  }

  @include media-breakpoint-up(md) {
    .btn ~ .btn {
      margin-left: .5rem;
    }
    .btn ~ .dropdown-toggle-split {
      margin-left: 0;
    }
  }
}
// Do not display ligatures in invalid-feedback to avoid confusion.
.invalid-feedback {
  code {
    font-variant-ligatures: none;
  }
}

.alert p:last-child {
  margin-bottom: 0;
}

code {
  background: $gray-300;
  padding: .15rem .25rem;
  border-radius: $border-radius;
}

pre code {
  padding: 0;
}

.log {
  margin-bottom: 0;
  padding: 1rem;
  background-color: $light;
  overflow: auto;
}

.unselectable {
  -webkit-user-select: none;
  -webkit-touch-callout: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}
